#include <iostream>
class Product {
public:
    virtual void use() = 0;
};
class ConcreteProductA : public Product {
public:
    void use() override { std::cout << "Using Product A" << std::endl; }
};
class ConcreteProductB : public Product {
public:
    void use() override { std::cout << "Using Product B" << std::endl; }
};
class Factory {
public:
    static Product* createProduct(char type) {
        if (type == 'A') return new ConcreteProductA();
        if (type == 'B') return new ConcreteProductB();
        return nullptr;
    }
};
int main() {
    Product* p = Factory::createProduct('A');
    p->use();
    delete p;
    return 0;
}
// Demonstrates the Factory design pattern to create objects based on input.