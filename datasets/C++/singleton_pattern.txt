#include <iostream>
class Singleton {
private:
    static Singleton* instance;
    Singleton() {}
public:
    static Singleton* getInstance() {
        if (!instance)
            instance = new Singleton();
        return instance;
    }
    void showMessage() {
        std::cout << "Singleton instance!" << std::endl;
    }
};
Singleton* Singleton::instance = nullptr;
int main() {
    Singleton::getInstance()->showMessage();
    return 0;
}
// Implements the Singleton design pattern which restricts instantiation of a class to one object.